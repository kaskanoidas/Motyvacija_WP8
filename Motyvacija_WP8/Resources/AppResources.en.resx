<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ResourceFlowDirection" xml:space="preserve">
    <value>LeftToRight</value>
    <comment>Controls the FlowDirection for all elements in the RootFrame. Set to the traditional direction of this resource file's language</comment>
  </data>
  <data name="ResourceLanguage" xml:space="preserve">
    <value>en</value>
    <comment>Controls the Language and ensures that the font for all elements in the RootFrame aligns with the app's language. Set to the language code of this resource file's language.</comment>
  </data>
  <data name="ApplicationTitle" xml:space="preserve">
    <value>Goals, Rezults, Salary</value>
  </data>
  <data name="SampleProperty" xml:space="preserve">
    <value>Sample Runtime Property Value</value>
  </data>
  <data name="About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AddNew" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="Archive" xml:space="preserve">
    <value>Archive</value>
  </data>
  <data name="BA" xml:space="preserve">
    <value>Basic Salary</value>
  </data>
  <data name="BR" xml:space="preserve">
    <value>Baseline value</value>
  </data>
  <data name="Calculate" xml:space="preserve">
    <value>Calculate</value>
  </data>
  <data name="Employees" xml:space="preserve">
    <value>Employees</value>
  </data>
  <data name="FR" xml:space="preserve">
    <value>Actual outcome</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="Indicators" xml:space="preserve">
    <value>Indicators</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Select language</value>
  </data>
  <data name="LanguageBarBack" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="Menu" xml:space="preserve">
    <value>Menu</value>
  </data>
  <data name="MKD" xml:space="preserve">
    <value>Maximum variable part</value>
  </data>
  <data name="ROD" xml:space="preserve">
    <value>Indicators</value>
  </data>
  <data name="SaveTA" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Tasks" xml:space="preserve">
    <value>Tasks</value>
  </data>
  <data name="TR" xml:space="preserve">
    <value>Target value</value>
  </data>
  <data name="UZD" xml:space="preserve">
    <value>Tasks</value>
  </data>
  <data name="VISO" xml:space="preserve">
    <value>Sum</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="EDIT" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EmployeeName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="IV" xml:space="preserve">
    <value>Evaluation</value>
  </data>
  <data name="MaxIV" xml:space="preserve">
    <value>Max evaluation</value>
  </data>
  <data name="Pav" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="MAXKDP" xml:space="preserve">
    <value>Maximum task-related variable part</value>
  </data>
  <data name="AboutString" xml:space="preserve">
    <value>There are five concepts related to each other in the life of any human being - THE GOAL ITSELF, GOAL-ORIENTED ACTIVITY, MOTIVATION, OUTCOME AND REWARD.

If a person has set a goal for himself/herself and is well motivated while performing a goal-oriented activity, he/she will achieve results and will be awarded for this. Inner motivation is the main driving force which helps achieve the desired goal.

It is absolutely necessary that the goals of a team or a company also become the personal goals of its members or employees through broad participation in the process of setting and achieving these goals. It is only then that goal-oriented activity would lead to the desired results. And the inner motivation would help to get them with everybody earning a certain amount of money for the results achieved.

This program is designed to help calculate components of employee ' s salary (gratification), i.e. a variable part, which depends on team or company goals and the achieved goal-oriented results. There is still another component, another variable part which depends on task execution by the said employee, feedback from consumers reports or results of the market research.

This program allows to neglect the so called "human factor" when calculating salaries of the employees who earn result-related wages that depend on the achieved results of the said company as well as on its salary fund.

This program is based on an algorithm which evaluates goal achieving effectiveness. The goals are defined by key performance indicators of the company.

When evaluating employee task execution or carrying out a consumer feedback research, the consumers evaluate the task performance of the company employees of the company and check their competence and knowledge through a range of tests. Thus effectiveness of the evaluation obtained can reach its potential maximum.

Taking this into account, the salary should be calculated as follows:

SALARY = BASIC SALARY + PERFORMANCE-RELATED VARIABLE PART + TASK-RELATED VARIABLE PART

BASIC SALARY is a fixed component of the payment, which is to be determined for each employee separately and depends on company ' s strategy, cost-effectiveness and the salary funds as well as on employee ' s competence, his/her position, responsibilities etc. Each company develops its own methodology for a basic salary calculations. Also, a minimum wage set by an individual state authority may be used.

PERFORMANCE-RELATED VARIABLE PART is the most important component of the salary. The majority of companies implement various business activity management systems based on a set of key performance indicators. One may refer to the following systems: BSC (Balanced Score Card), Lean, TOC and others. Well known are such indicators as PROFIT, COSTS, PRODUCTION VOLUME and others, which we intend to refer to as INDICATOR A, INDICATOR B, INDICATOR C etc.

When planning its activity, a company sets goals and target values of indicators: TARGET A, TARGET B, TARGET C etc. (increase the PROFIT , reduce the COSTS, expand PRODUCTION VOLUME etc.) After such information was obtained a company is able to calculate what maximum salary funds should be if the goals were met, i.e. MAXIMUM PERFORMANCE-RELATED VARIABLE PART (MaxVP for PERFORMANCE) , and also we divide this amount according to the importance of the indicators proportionally to the indicators: MaxVP A, MaxVP B, MaxVP C etc.

MaxVP for PERFORMANCE = MaxVP A + MaxVP B + MaxVP C + ...

A company determines for each employee a maximum performance-related variable part based on selected indicators. Knowing the BASELINE (initial) values of indicators: BASELINE A, BASELINE B, BASELINE C etc . , TARGET values : TARGET A, TARGET B, TARGET C etc., and after measuring at a given period of time the ACTUAL OUTCOME values of indicators : ACTUAL A, ACTUAL B, ACTUAL C etc., performance-related variable parts can be calculated: VARIABLE A, VARIABLE B, VARIABLE C etc. Thus:

PERFORMANCE-RELATED VARIABLE PART = VARIABLE A + VARIABLE B + VARIABLE C + ...

TASK-RELATED VARIABLE PART - if the company employees execute various tasks a need to evaluate the effectiveness of these tasks execution arises. An employee can carry out several tasks: TASK X, TASK Y, TASK Z etc. The tasks classified as their importance increase can be evaluated using different point scales (systems), i.e. maximum evaluation of each task can be different. One gets used to the same evaluation scales taught at school where all subjects are assessed using the same point scales with 10 points maximum for all subjects. Suppose, the maximum task evaluations are as follows: MaxVAL X, MaxVAL Y, MaxVAL Z etc. If an employee has completed all tasks in full and got the maximum evaluations marks, he/she gets MAXIMUM TASK-RELATED VARIABLE PART (MaxVPT), which is to be determined in accordance with possibilities of a company and task importance for the said company ' s goal achievement.

A SAMPLE: this is an elementary example to demonstrate how the program functions. For example, the goals of a company are described by two indicators : A - PROFIT and B - COSTS .

MARKO, a senior manager (let us place his name on the list of employees of the program), through realization of the tasks allocated to him, will influence the abovementioned indicators. BASIC PART FOR MARKO to be entered: BASIC = 1000 . Enter the following values of indicators:

PROFIT: BASELINE 100000; TARGET 130000; ACTUAL 121000;

COSTS: BASELINE 500000; TARGET 450000; ACTUAL 480000;

MARKO is motivated for TASK execution as well:

X- RELATIONSHIP WITH THE CLIENTS MaxVAL = 11 Evaluation = 9 points;

Y- CUTTING ON THE RETURN OF GOODS BY CLIENTS MaxVAL = 9 Evaluation = 5 points;

Z- IMPROVING PROFESSIONAL SKILLS MaxVAL = 7; Evaluation = 6 points;

If the company achieved its goals according to these indicators, and MARKO received the highest evaluations for the task execution, the company would pay to him an extra MAXIMUM VARIABLE PART 2700:

Enter PROFIT- related MaxVP 1200;

Enter COSTS- related MaxVP 800;

Enter TASK -related MaxVPT 700;

Still, having made calculations using actual values of indicators and evaluations of the actual tasks, we obtain that VARIABLE PART is equal to 1679:

PERFORMANCE-RELATED VARIABLE PART 1160;

TASK-RELATED VARIABLE PART 519;

In total this month MARKO earned:

SALARY = 1000 + 1160 + 519 = 2679;

He could earn maximum SALARY of 3700.</value>
  </data>
  <data name="Page" xml:space="preserve">
    <value>Page</value>
  </data>
</root>