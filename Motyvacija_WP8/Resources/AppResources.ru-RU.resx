<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ResourceFlowDirection" xml:space="preserve">
    <value>LeftToRight</value>
    <comment>Controls the FlowDirection for all elements in the RootFrame. Set to the traditional direction of this resource file's language</comment>
  </data>
  <data name="ResourceLanguage" xml:space="preserve">
    <value>ru-RU</value>
    <comment>Controls the Language and ensures that the font for all elements in the RootFrame aligns with the app's language. Set to the language code of this resource file's language.</comment>
  </data>
  <data name="ApplicationTitle" xml:space="preserve">
    <value>Goals, Rezults, Salary</value>
  </data>
  <data name="SampleProperty" xml:space="preserve">
    <value>Sample Runtime Property Value</value>
  </data>
  <data name="About" xml:space="preserve">
    <value>Описание</value>
  </data>
  <data name="AddNew" xml:space="preserve">
    <value>Добавлять</value>
  </data>
  <data name="Archive" xml:space="preserve">
    <value>Архив</value>
  </data>
  <data name="BA" xml:space="preserve">
    <value>Баз. зарплата</value>
  </data>
  <data name="BR" xml:space="preserve">
    <value>Базовое значение</value>
  </data>
  <data name="Calculate" xml:space="preserve">
    <value>Cчитать</value>
  </data>
  <data name="Employees" xml:space="preserve">
    <value>Cотрудники</value>
  </data>
  <data name="FR" xml:space="preserve">
    <value>Фактический результат</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Помощь</value>
  </data>
  <data name="Indicators" xml:space="preserve">
    <value>Показатели</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Выберите язык</value>
  </data>
  <data name="LanguageBarBack" xml:space="preserve">
    <value>Назад</value>
  </data>
  <data name="Menu" xml:space="preserve">
    <value>Mеню</value>
  </data>
  <data name="MKD" xml:space="preserve">
    <value>Максимальная переменная часть</value>
  </data>
  <data name="ROD" xml:space="preserve">
    <value>Показатели</value>
  </data>
  <data name="SaveTA" xml:space="preserve">
    <value>Экономить</value>
  </data>
  <data name="Tasks" xml:space="preserve">
    <value>Задании</value>
  </data>
  <data name="TR" xml:space="preserve">
    <value>Целевое значение</value>
  </data>
  <data name="UZD" xml:space="preserve">
    <value>Задании</value>
  </data>
  <data name="VISO" xml:space="preserve">
    <value>Количество</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Ладно</value>
  </data>
  <data name="EDIT" xml:space="preserve">
    <value>Pедактировать</value>
  </data>
  <data name="EmployeeName" xml:space="preserve">
    <value>Название</value>
  </data>
  <data name="IV" xml:space="preserve">
    <value>Oценка</value>
  </data>
  <data name="MaxIV" xml:space="preserve">
    <value>Макс. оценка</value>
  </data>
  <data name="Pav" xml:space="preserve">
    <value>Название</value>
  </data>
  <data name="MAXKDP" xml:space="preserve">
    <value>Максимальная переменная часть в соответствии с заданиями:</value>
  </data>
  <data name="AboutString" xml:space="preserve">
    <value>ДЕЯТЕЛЬНОСТЬ, ЦЕЛЬ, МОТИВАЦИЯ, РЕЗУЛЬТАТ, ВОЗНАГРАЖДЕНИЕ – это пять понятий, которые касаются каждого человека. Каждый, кто осуществляет деятельность, имеет цель, внутреннюю мотивацию, достигает результатов и получает за это вознаграждение. Внутренняя мотивация – основной двигатель достижения цели.


Для того, чтобы цель команды стала целью каждого ее члена, необходимо, чтобы каждый принял участие в формировании, определении этих целей. Тогда при реализации поставленных целей возникает внутренняя мотивация, которая помогает добиться наилучших результатов, и все получают вознаграждение в соответствии с достигнутыми результатами.


Назначение настоящей программы – расчет переменной части заработной платы работников, которая зависит от целей предприятия или команды и достигнутых при реализации этих целей результатов, а также дополнительной переменной части заработной платы, которая зависит от выполнения работником заданий, оценок потребителей или результатов тестов.


Все это позволяет избежать «человеческого фактора» при расчете работникам заработной платы, так как все они получают вознаграждение в соответствии с достигнутыми результатами и возможностями предприятия.


Основу этой программы составляет алгоритм оценки эффективности достижения цели, когда цели выражены основными показателями деятельности предприятия.


При оценке исполнения работником заданий или при проведении опросов потребителей, когда потребители оценивают работников предприятия, а также при проверке компетенции и знаний при помощи тестов, рассчитывается эффективность полученной оценки относительно максимально возможной оценки.


Принимая все это во внимание, заработная плата рассчитывается следующим образом:


ЗАРАБОТНАЯ ПЛАТА = БАЗОВАЯ ЗАРАБОТНАЯ ПЛАТА + ПЕРЕМЕННАЯ ЧАСТЬ В СООТВЕТСТВИИ С ПОКАЗАТЕЛЯМИ + ПЕРЕМЕННАЯ ЧАСТЬ В СООТВЕТСТВИИ С ЗАДАНИЯМИ


БАЗОВАЯ ЗАРАБОТНАЯ ПЛАТА – это фиксированная часть заработной платы, которая устанавливается для каждого работника в соответствии с возможностями предприятия, компетенцией, должностью, ответственностью работника и т.д. Каждое предприятие имеет собственную методику. Можно основываться и на размере установленной государством минимальной заработной платой.


ПЕРЕМЕННАЯ ЧАСТЬ В СООТВЕТСТВИИ С ПОКАЗАТЕЛЯМИ – это самая важная составная часть заработной платы. Большинство предприятий внедрили системы управления деятельностью, которые опираются на совокупность показателей. К таковым можно отнести BSC (Balanced Score Card), Lean, TOC и другие. Всем известны такие показатели, как ПРИБЫЛЬ, ЗАТРАТЫ, ОБЪЕМЫ ПРОИЗВОДСТВА и другие, которые будем называть просто ПОКАЗАТЕЛЬ А, ПОКАЗАТЕЛЬ В, ПОКАЗАТЕЛЬ С и т.д.


При планировании собственной деятельности предприятия определяют свои цели и целевые значения показателей: ЦЕЛЕВОЕ А, ЦЕЛЕВОЕ В, ЦЕЛЕВОЕ С и т.д. (увеличить ПРИБЫЛЬ , уменьшить ЗАТРАТЫ , увеличить ОБЪЕМЫ ПРОИЗВОДСТВА и тому подобное). Имея эту информацию можно вычислить, каким может быть максимальный размер фонда заработной платы, если цели будут достигнуты, т.е. МАКСИМАЛЬНАЯ ПЕРЕМЕННАЯ ЧАСТЬ В СООТВЕТСТВИИ С ПОКАЗАТЕЛЯМИ ( MaxПЧ ПОКАЗАТЕЛЕЙ ), а также в соответствии с важностью показателей эту сумму разделить пропорционально показателям: MaxПЧ А, MaxПЧ В, MaxПЧ С и т.д.


MaxПЧ ПОКАЗАТЕЛЕЙ = MaxПЧ A + MaxПЧ B + MaxПЧ C + …


Аналогично для каждого работника в соответствии с выбранными показателями устанавливаем размер максимальных переменных частей. Зная БАЗОВЫЕ (начальные) значения показателей: БАЗОВОЕ А, БАЗОВОЕ В, БАЗОВОЕ С и т.д., ЦЕЛЕВЫЕ : ЦЕЛЕВОЕ А, ЦЕЛЕВОЕ В, ЦЕЛЕВОЕ С и т.д., и измерив в выбранный момент ФАКТИЧЕСКИЕ ЗНАЧЕНИЯ ПОКАЗАТЕЛЕЙ: ФАКТИЧЕСКОЕ А, ФАКТИЧЕСКОЕ В, ФАКТИЧЕСКОЕ С и т.д., вычисляем переменные части заработной платы в соответствии с показателями: ПЕРЕМЕННАЯ А, ПЕРЕМЕННАЯ В, ПЕРЕМЕННАЯ С и т.д. Получаем:

ПЕРЕМЕННАЯ ЧАСТЬ В СООТВЕТСТВИИ С ПОКАЗАТЕЛЯМИ = ПЕРЕМЕННАЯ A + ПЕРЕМЕННАЯ B + ПЕРЕМЕННАЯ C + …


ПЕРЕМЕННАЯ ЧАСТЬ В СООТВЕТСТВИИ С ЗАДАНИЯМИ – если работники предприятий выполняют различные задания, то приходится оценивать эффективность выполнения этих заданий. Работник может выполнять несколько заданий: ЗАДАНИЕ X, ЗАДАНИЕ Y, ЗАДАНИЕ Z и т.д. В соответствии со своей важностью задания могут быть оценены по разным балловым шкалам (системам), т.е. максимальная оценка каждого задания может быть разной. В школе мы привыкли, что все предметы оценивались по одной шкале, например, максимальная оценка предметов составляет 10. Максимальные оценки заданий будем обозначать: MaxОЦ X, MaxОЦ Y, MaxОЦ Z и т.д. Если работник полностью выполнит все задания и получит максимальные оценки, то он получит МАКСИМАЛЬНУЮ ПЕРЕМЕННУЮ ЧАСТЬ В СООТВЕТСТВИИ С ЗАДАНИЯМИ (MaxПЧЗ), которая устанавливается в соответствии с возможностями предприятия и важностью заданий для реализации целей предприятия.


ПРИМЕР : на элементарном примере проиллюстрируем действие программы.

Пусть цели предприятия будут описаны двумя показателями: A – ПРИБЫЛЬ И B - ЗАТРАТЫ.


Ст. менеджер МАРКО (вводим в программе в список работников) при выполнении порученной ему работы влияет на данные показатели. БАЗОВАЯ ЗАРАБОТНАЯ ПЛАТА для МАРКО вводится: БАЗОВАЯ = 1000. Вводим значения показателей:

ПРИБЫЛЬ: БАЗОВОЕ 100000; ЦЕЛЕВОЕ 130000; ФАКТИЧЕСКОЕ 121000;

ЗАТРАТЫ: БАЗОВОЕ 500000; ЦЕЛЕВОЕ 450000; ФАКТИЧЕСКОЕ 480000;

МАРКО еще мотивируется в соответствии с исполнением ЗАДАНИЙ:

X – ОТНОШЕНИЯ С КЛИЕНТАМИ MaxОЦ = 11; Оценен 9;

Y – МИНИМИЗАЦИЯ ВОЗВРАТА ТОВАРОВ MaxОЦ = 9; Оценен 5;

Z – ПОВЫШЕНИЕ КВАЛИФИКАЦИИ Max ОЦ = 7; Оценен 6;

Если бы предприятие достигло целей по этим показателям, и МАРКО получил бы высшие оценки по исполнению заданий, то предприятие дополнительно выплатило бы ему МАКСИМАЛЬНУЮ ПЕРЕМЕННУЮ ЧАСТЬ 2700:

По показателю ПРИБЫЛЬ вводим MaxПЧ 1200;

По показателю ЗАТРАТЫ вводим MaxПЧ 800;

По исполнению ЗАДАНИЙ MaxПЧЗ 700;

Однако, сосчитав значения фактических показателей и фактические оценки заданий, получаем, что ПЕРЕМЕННАЯ ЧАСТЬ ЗАРАБОТНОЙ ПЛАТЫ составляет 1679:

ПЕРЕМЕННАЯ ЧАСТЬ В СООТВЕТСТВИИ С ПОКАЗАТЕЛЯМИ 1160;

ПЕРЕМЕННАЯ ЧАСТЬ В СООТВЕТСТВИИ С ЗАДАНИЯМИ 519;

Всего МАРКО в этом месяце заработал:

ЗАРАБОТНАЯ ПЛАТА = 1000 + 1160 + 519 = 2679;


Максимально он мог заработать 3700.
r</value>
  </data>
  <data name="Page" xml:space="preserve">
    <value>Cтраница</value>
  </data>
  <data name="BAT" xml:space="preserve">
    <value>Баз. </value>
  </data>
  <data name="BRT" xml:space="preserve">
    <value>Базовое</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Дата</value>
  </data>
  <data name="FRT" xml:space="preserve">
    <value>Фактический</value>
  </data>
  <data name="MKDT" xml:space="preserve">
    <value>Макс. п. ч.</value>
  </data>
  <data name="RODT" xml:space="preserve">
    <value>Показатели</value>
  </data>
  <data name="SHOW" xml:space="preserve">
    <value>Показывать</value>
  </data>
  <data name="TRT" xml:space="preserve">
    <value>Целевое</value>
  </data>
  <data name="UZDT" xml:space="preserve">
    <value>Задании</value>
  </data>
  <data name="VISOT" xml:space="preserve">
    <value>Сумма</value>
  </data>
</root>